# -*- coding: utf-8 -*-
"""
Created on Thu Apr  4 17:23:55 2019

@author: Carolina Natel de Moura

This code unpack the data obtained from the Hidroweb system from day columns
to rows creating a continuos dataseries.
Download data: <http://www.snirh.gov.br/hidroweb/publico/apresentacao.jsf>

Step-by-Step:
    
1) Check if the original date in the csv file is in the format day/month/year;
2) After importing the csv file, check if the columns and the data are OK, 
    for example, in the "EstacaoCodigo" there is the station code, etc.
3) Check if the final 'data' variable has the same number of rows that the variable 'helperx'.

P.S.: In case you find any error ou you have any doubt, please contact: carolina.natel@gmail.com

"""
# Importing the libraries
import pandas as pd
import calendar

# Importing the csv file (Hidroweb system format)
df = pd.read_csv('02651004.csv')

# Define function to extract only the necessary columns 
#('NivelConsistencia', 'Data' and rainfall_days ('Chuva1, Chuva2, ...')
def extract_data(df):
    # Create a df to the observed rainfall days
    df_aux = pd.DataFrame(df.iloc[:,13:44].values, columns = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14',
                    '15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31'])  
    # Create a df to the consistency level 'NivelConsistencia' and original date 'Data'
    df_aux2 = pd.DataFrame(df.iloc[:,1:3].values, columns = ['nivel_cons', 'date']) 
    # Transforming date column in datetime
    df_aux2['date'] = pd.to_datetime(df_aux2.date, dayfirst = True)  
    # Concatenate the two matrix
    df_final = pd.concat([df_aux2, df_aux], axis=1).sort_values('date')
    return df_final

df_final = extract_data(df)

# Filling the missing values with NaN

helper = pd.DataFrame({'date': pd.date_range(df_final.date.min(), df_final.date.max(), freq = 'M')})

# Create a daily timestamp for the dataseries, change the end parameter for the last day of the series
aux = helper.iloc[len(helper)-1,0] # get the last date of the series
end_date = pd.datetime(aux.year, aux.month+1, 31) 

helperx = pd.DataFrame({'date': pd.date_range(df_final.date.min(), end= end_date, freq = 'D')})

def correct_date(x):
    ''' This function corrects the last day generated by pd.date_range, freq = 'M'  listed as the last day of the month by
    day 1 to merge with the hydroweb file that uses day 01, where:
        x: a DataFrame containing the complete dateseries without any missing month'''
    hlp_aux = []
    for i in range(len(x)):
        aux = x.iloc[i,0]
        hlp = aux.replace(day=1)
        hlp_aux.append(hlp)
    return hlp_aux

helper = pd.DataFrame(correct_date(helper)) # apply the correction
helper.columns = ['date'] # add a name to the column

# Create a new_df with the correct date and filling the missing data with NaN
    
new_df = df_final.merge(helper, how='outer').sort_values('date')

# Select consisted data when available, when not, select the raw data.
def consisted(df):
    unique_dates = {}
    for i in range(len(df)):
        aux = df.iloc[i,:]
        aux2 = pd.DataFrame(aux).transpose()
        date = aux[1]
        cons = aux[0]
        stored = unique_dates.get(date)
        if stored is None:
            unique_dates[date] = aux2
            continue
        stored_cons = stored.iloc[0,0]
        if stored_cons < cons:
            unique_dates[date] = aux2
    df_final = pd.DataFrame()
    for date in unique_dates:
        val = unique_dates[date]
        df_final = df_final.append(val)
    return df_final

new_df = consisted(new_df)
new_df = new_df.iloc[:,1:] # drop the nivel_cons column

# Desempilha dados

def unpacking(x):
    '''This function unpack  'hidroweb' dataset that presents the daily data in
    columns to each year/month in order to generate a continous timeseries 
    (year, month, day), respecting leap years and the number of days in each month.
    x: the hidroweb matrix with the first column being 'nivel_cons', the second column
    being date in datetime format (year-month-day) and the other columns
    presenting the rainfall days as formated in the new_df Dataframe'''
    MONTH_DAYS = {
            1: 32,
            3: 32,
            4: 31,
            5: 32,
            6: 31,
            7: 32,
            8: 32,
            9: 31,
            10: 32,
            11: 31,
            12: 32
    }
    
    column_aux = pd.Series()
    for i in  range(len(x)):
        aux = x.iloc[i,0] 
        month_aux = aux.month
        if month_aux == 2:
            year_aux = aux.year
            if (calendar.isleap(year_aux) == True):
                column = x.iloc[i,1:30].T     
            else:  #### if it is not leap year
                column = x.iloc[i,1:29].T     
        else:
            column = x.iloc[i,1:MONTH_DAYS[month_aux]].T
        column_aux = column_aux.append(column, ignore_index=True)
    return column_aux

data = pd.DataFrame(unpacking(new_df)) #apply the function
data.columns = ['rainfall']
data = pd.concat([helperx, data], axis=1) # concateneted the unpacked data with the daily date

del aux, df, df_final, end_date, helper, helperx, new_df

